-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\monitor\monitor_addr_decoder.vhd
-- Created: 2022-08-30 10:16:39
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: monitor_addr_decoder
-- Source Path: monitor/monitor_axi_lite/monitor_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY monitor_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI0                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI1                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI2                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI3                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI4                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI5                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI6                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI7                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_dataWriteAXI0               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI1               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI2               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI3               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI4               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI5               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI6               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI7               :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END monitor_addr_decoder;


ARCHITECTURE rtl OF monitor_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_dataReadAXI0_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI7_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI6_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI5_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI4_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI3_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI2_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI1_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_dataWriteAXI0_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL data_slice_axi_enable_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_enable_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI0_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI0_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI0_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI1_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI1_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI1_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI2_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI2_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI2_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI3_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI3_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI3_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI4_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI4_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI4_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI5_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI5_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI5_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI6_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI6_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI6_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_dataWriteAXI7_1_1        : std_logic;  -- ufix1
  SIGNAL data_reg_dataWriteAXI7_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataWriteAXI7_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI0_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_dataReadAXI1_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_dataReadAXI0            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI0_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI1_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_dataReadAXI2_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_dataReadAXI1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI1_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI2_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_dataReadAXI3_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_dataReadAXI2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI2_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI3_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_dataReadAXI4_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_dataReadAXI3            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI3_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI4_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_dataReadAXI5_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_dataReadAXI4            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI4_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI5_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_dataReadAXI6_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_dataReadAXI5            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI5_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI6_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_dataReadAXI7_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_dataReadAXI6            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI6_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_dataReadAXI7_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_dataReadAXI7            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_dataReadAXI7_1_1       : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_dataReadAXI0_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0080#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI7_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI6_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI5_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI3_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  
  decode_sel_dataWriteAXI0_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_axi_enable_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_axi_enable_1_1 <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  data_slice_axi_enable_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_axi_enable_1_1;

  
  decode_rd_axi_enable_1_1 <= const_0 WHEN decode_sel_axi_enable_1_1 = '0' ELSE
      data_slice_axi_enable_1;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  reg_ip_timestamp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ip_timestamp <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= decode_rd_axi_enable_1_1 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_enb_dataWriteAXI0_1_1 <= decode_sel_dataWriteAXI0_1_1 AND wr_enb;

  reg_dataWriteAXI0_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI0_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI0_1_1 = '1' THEN
        data_reg_dataWriteAXI0_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI0_1_1_process;


  
  decode_rd_dataWriteAXI0_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_dataWriteAXI0_1_1 = '0' ELSE
      data_reg_dataWriteAXI0_1_1;

  reg_enb_dataWriteAXI1_1_1 <= decode_sel_dataWriteAXI1_1_1 AND wr_enb;

  reg_dataWriteAXI1_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI1_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI1_1_1 = '1' THEN
        data_reg_dataWriteAXI1_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI1_1_1_process;


  
  decode_rd_dataWriteAXI1_1_1 <= decode_rd_dataWriteAXI0_1_1 WHEN decode_sel_dataWriteAXI1_1_1 = '0' ELSE
      data_reg_dataWriteAXI1_1_1;

  reg_enb_dataWriteAXI2_1_1 <= decode_sel_dataWriteAXI2_1_1 AND wr_enb;

  reg_dataWriteAXI2_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI2_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI2_1_1 = '1' THEN
        data_reg_dataWriteAXI2_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI2_1_1_process;


  
  decode_rd_dataWriteAXI2_1_1 <= decode_rd_dataWriteAXI1_1_1 WHEN decode_sel_dataWriteAXI2_1_1 = '0' ELSE
      data_reg_dataWriteAXI2_1_1;

  reg_enb_dataWriteAXI3_1_1 <= decode_sel_dataWriteAXI3_1_1 AND wr_enb;

  reg_dataWriteAXI3_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI3_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI3_1_1 = '1' THEN
        data_reg_dataWriteAXI3_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI3_1_1_process;


  
  decode_rd_dataWriteAXI3_1_1 <= decode_rd_dataWriteAXI2_1_1 WHEN decode_sel_dataWriteAXI3_1_1 = '0' ELSE
      data_reg_dataWriteAXI3_1_1;

  reg_enb_dataWriteAXI4_1_1 <= decode_sel_dataWriteAXI4_1_1 AND wr_enb;

  reg_dataWriteAXI4_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI4_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI4_1_1 = '1' THEN
        data_reg_dataWriteAXI4_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI4_1_1_process;


  
  decode_rd_dataWriteAXI4_1_1 <= decode_rd_dataWriteAXI3_1_1 WHEN decode_sel_dataWriteAXI4_1_1 = '0' ELSE
      data_reg_dataWriteAXI4_1_1;

  reg_enb_dataWriteAXI5_1_1 <= decode_sel_dataWriteAXI5_1_1 AND wr_enb;

  reg_dataWriteAXI5_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI5_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI5_1_1 = '1' THEN
        data_reg_dataWriteAXI5_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI5_1_1_process;


  
  decode_rd_dataWriteAXI5_1_1 <= decode_rd_dataWriteAXI4_1_1 WHEN decode_sel_dataWriteAXI5_1_1 = '0' ELSE
      data_reg_dataWriteAXI5_1_1;

  reg_enb_dataWriteAXI6_1_1 <= decode_sel_dataWriteAXI6_1_1 AND wr_enb;

  reg_dataWriteAXI6_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI6_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI6_1_1 = '1' THEN
        data_reg_dataWriteAXI6_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI6_1_1_process;


  
  decode_rd_dataWriteAXI6_1_1 <= decode_rd_dataWriteAXI5_1_1 WHEN decode_sel_dataWriteAXI6_1_1 = '0' ELSE
      data_reg_dataWriteAXI6_1_1;

  reg_enb_dataWriteAXI7_1_1 <= decode_sel_dataWriteAXI7_1_1 AND wr_enb;

  reg_dataWriteAXI7_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_dataWriteAXI7_1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_dataWriteAXI7_1_1 = '1' THEN
        data_reg_dataWriteAXI7_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataWriteAXI7_1_1_process;


  
  decode_rd_dataWriteAXI7_1_1 <= decode_rd_dataWriteAXI6_1_1 WHEN decode_sel_dataWriteAXI7_1_1 = '0' ELSE
      data_reg_dataWriteAXI7_1_1;

  read_dataReadAXI0_unsigned <= unsigned(read_dataReadAXI0);

  
  decode_sel_dataReadAXI1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0081#, 14) ELSE
      '0';

  reg_dataReadAXI0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI0 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI0 <= read_dataReadAXI0_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI0_process;


  
  decode_rd_dataReadAXI0_1_1 <= decode_rd_dataWriteAXI7_1_1 WHEN decode_sel_dataReadAXI0_1_1 = '0' ELSE
      read_reg_dataReadAXI0;

  read_dataReadAXI1_unsigned <= unsigned(read_dataReadAXI1);

  
  decode_sel_dataReadAXI2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0082#, 14) ELSE
      '0';

  reg_dataReadAXI1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI1 <= read_dataReadAXI1_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI1_process;


  
  decode_rd_dataReadAXI1_1_1 <= decode_rd_dataReadAXI0_1_1 WHEN decode_sel_dataReadAXI1_1_1 = '0' ELSE
      read_reg_dataReadAXI1;

  read_dataReadAXI2_unsigned <= unsigned(read_dataReadAXI2);

  
  decode_sel_dataReadAXI3_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0083#, 14) ELSE
      '0';

  reg_dataReadAXI2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI2 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI2 <= read_dataReadAXI2_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI2_process;


  
  decode_rd_dataReadAXI2_1_1 <= decode_rd_dataReadAXI1_1_1 WHEN decode_sel_dataReadAXI2_1_1 = '0' ELSE
      read_reg_dataReadAXI2;

  read_dataReadAXI3_unsigned <= unsigned(read_dataReadAXI3);

  
  decode_sel_dataReadAXI4_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0084#, 14) ELSE
      '0';

  reg_dataReadAXI3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI3 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI3 <= read_dataReadAXI3_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI3_process;


  
  decode_rd_dataReadAXI3_1_1 <= decode_rd_dataReadAXI2_1_1 WHEN decode_sel_dataReadAXI3_1_1 = '0' ELSE
      read_reg_dataReadAXI3;

  read_dataReadAXI4_unsigned <= unsigned(read_dataReadAXI4);

  
  decode_sel_dataReadAXI5_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0085#, 14) ELSE
      '0';

  reg_dataReadAXI4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI4 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI4 <= read_dataReadAXI4_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI4_process;


  
  decode_rd_dataReadAXI4_1_1 <= decode_rd_dataReadAXI3_1_1 WHEN decode_sel_dataReadAXI4_1_1 = '0' ELSE
      read_reg_dataReadAXI4;

  read_dataReadAXI5_unsigned <= unsigned(read_dataReadAXI5);

  
  decode_sel_dataReadAXI6_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0086#, 14) ELSE
      '0';

  reg_dataReadAXI5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI5 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI5 <= read_dataReadAXI5_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI5_process;


  
  decode_rd_dataReadAXI5_1_1 <= decode_rd_dataReadAXI4_1_1 WHEN decode_sel_dataReadAXI5_1_1 = '0' ELSE
      read_reg_dataReadAXI5;

  read_dataReadAXI6_unsigned <= unsigned(read_dataReadAXI6);

  
  decode_sel_dataReadAXI7_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0087#, 14) ELSE
      '0';

  reg_dataReadAXI6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI6 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI6 <= read_dataReadAXI6_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI6_process;


  
  decode_rd_dataReadAXI6_1_1 <= decode_rd_dataReadAXI5_1_1 WHEN decode_sel_dataReadAXI6_1_1 = '0' ELSE
      read_reg_dataReadAXI6;

  read_dataReadAXI7_unsigned <= unsigned(read_dataReadAXI7);

  reg_dataReadAXI7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_dataReadAXI7 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_dataReadAXI7 <= read_dataReadAXI7_unsigned;
      END IF;
    END IF;
  END PROCESS reg_dataReadAXI7_process;


  
  decode_rd_dataReadAXI7_1_1 <= decode_rd_dataReadAXI6_1_1 WHEN decode_sel_dataReadAXI7_1_1 = '0' ELSE
      read_reg_dataReadAXI7;

  data_read <= std_logic_vector(decode_rd_dataReadAXI7_1_1);

  write_dataWriteAXI0 <= std_logic_vector(data_reg_dataWriteAXI0_1_1);

  write_dataWriteAXI1 <= std_logic_vector(data_reg_dataWriteAXI1_1_1);

  write_dataWriteAXI2 <= std_logic_vector(data_reg_dataWriteAXI2_1_1);

  write_dataWriteAXI3 <= std_logic_vector(data_reg_dataWriteAXI3_1_1);

  write_dataWriteAXI4 <= std_logic_vector(data_reg_dataWriteAXI4_1_1);

  write_dataWriteAXI5 <= std_logic_vector(data_reg_dataWriteAXI5_1_1);

  write_dataWriteAXI6 <= std_logic_vector(data_reg_dataWriteAXI6_1_1);

  write_dataWriteAXI7 <= std_logic_vector(data_reg_dataWriteAXI7_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

END rtl;

