-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\monitor\monitor_axi_lite.vhd
-- Created: 2022-08-30 10:16:40
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: monitor_axi_lite
-- Source Path: monitor/monitor_axi_lite
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY monitor_axi_lite IS
  PORT( reset                             :   IN    std_logic;
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI0                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI1                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI2                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI3                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI4                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI5                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI6                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_dataReadAXI7                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic;  -- ufix1
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_dataWriteAXI0               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI1               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI2               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI3               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI4               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI5               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI6               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_dataWriteAXI7               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        reset_internal                    :   OUT   std_logic  -- ufix1
        );
END monitor_axi_lite;


ARCHITECTURE rtl OF monitor_axi_lite IS

  -- Component Declarations
  COMPONENT monitor_addr_decoder
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          data_write                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   IN    std_logic;  -- ufix1
          rd_enb                          :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI0               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI1               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI2               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI3               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI4               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI5               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI6               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI7               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_read                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_dataWriteAXI0             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI1             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI2             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI3             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI4             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI5             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI6             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI7             :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT monitor_axi_lite_module
    PORT( clk                             :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          data_read                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          data_write                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   OUT   std_logic;  -- ufix1
          rd_enb                          :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : monitor_addr_decoder
    USE ENTITY work.monitor_addr_decoder(rtl);

  FOR ALL : monitor_axi_lite_module
    USE ENTITY work.monitor_axi_lite_module(rtl);

  -- Signals
  SIGNAL top_data_write                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_addr_sel                     : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL top_wr_enb                       : std_logic;  -- ufix1
  SIGNAL top_rd_enb                       : std_logic;  -- ufix1
  SIGNAL top_data_read                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI0_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI1_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI2_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI3_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI4_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI5_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI6_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI7_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL top_reset_internal               : std_logic;  -- ufix1

BEGIN
  u_monitor_addr_decoder_inst : monitor_addr_decoder
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              reset => reset,
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              read_ip_timestamp => read_ip_timestamp,  -- ufix32
              read_dataReadAXI0 => read_dataReadAXI0,  -- ufix32
              read_dataReadAXI1 => read_dataReadAXI1,  -- ufix32
              read_dataReadAXI2 => read_dataReadAXI2,  -- ufix32
              read_dataReadAXI3 => read_dataReadAXI3,  -- ufix32
              read_dataReadAXI4 => read_dataReadAXI4,  -- ufix32
              read_dataReadAXI5 => read_dataReadAXI5,  -- ufix32
              read_dataReadAXI6 => read_dataReadAXI6,  -- ufix32
              read_dataReadAXI7 => read_dataReadAXI7,  -- ufix32
              data_read => top_data_read,  -- ufix32
              write_axi_enable => write_axi_enable,  -- ufix1
              write_dataWriteAXI0 => write_dataWriteAXI0_tmp,  -- ufix32
              write_dataWriteAXI1 => write_dataWriteAXI1_tmp,  -- ufix32
              write_dataWriteAXI2 => write_dataWriteAXI2_tmp,  -- ufix32
              write_dataWriteAXI3 => write_dataWriteAXI3_tmp,  -- ufix32
              write_dataWriteAXI4 => write_dataWriteAXI4_tmp,  -- ufix32
              write_dataWriteAXI5 => write_dataWriteAXI5_tmp,  -- ufix32
              write_dataWriteAXI6 => write_dataWriteAXI6_tmp,  -- ufix32
              write_dataWriteAXI7 => write_dataWriteAXI7_tmp  -- ufix32
              );

  u_monitor_axi_lite_module_inst : monitor_axi_lite_module
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              data_read => top_data_read,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              reset_internal => top_reset_internal  -- ufix1
              );

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

  write_dataWriteAXI0 <= write_dataWriteAXI0_tmp;

  write_dataWriteAXI1 <= write_dataWriteAXI1_tmp;

  write_dataWriteAXI2 <= write_dataWriteAXI2_tmp;

  write_dataWriteAXI3 <= write_dataWriteAXI3_tmp;

  write_dataWriteAXI4 <= write_dataWriteAXI4_tmp;

  write_dataWriteAXI5 <= write_dataWriteAXI5_tmp;

  write_dataWriteAXI6 <= write_dataWriteAXI6_tmp;

  write_dataWriteAXI7 <= write_dataWriteAXI7_tmp;

  reset_internal <= top_reset_internal;

END rtl;

