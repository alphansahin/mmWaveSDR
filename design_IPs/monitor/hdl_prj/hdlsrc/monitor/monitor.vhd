-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\monitor\monitor.vhd
-- Created: 2022-08-30 10:16:40
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: monitor
-- Source Path: monitor
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY monitor IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        dataRead0                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataRead1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataRead2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataRead3                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataRead4                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataRead5                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataRead6                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataRead7                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        dataWrite0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataWrite1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataWrite2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataWrite3                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataWrite4                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataWrite5                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataWrite6                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        dataWrite7                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END monitor;


ARCHITECTURE rtl OF monitor IS

  -- Component Declarations
  COMPONENT monitor_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT monitor_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI0               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI1               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI2               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI3               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI4               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI5               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI6               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_dataReadAXI7               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_dataWriteAXI0             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI1             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI2             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI3             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI4             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI5             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI6             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_dataWriteAXI7             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT monitor_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          dataWriteAXI0                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWriteAXI1                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWriteAXI2                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWriteAXI3                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWriteAXI4                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWriteAXI5                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWriteAXI6                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWriteAXI7                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead0                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead4                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead5                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead6                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataRead7                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          ce_out                          :   OUT   std_logic;  -- ufix1
          dataWrite0                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWrite1                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWrite2                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWrite3                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWrite4                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWrite5                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWrite6                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataWrite7                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI0                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI1                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI2                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI3                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI4                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI5                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI6                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          dataReadAXI7                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : monitor_reset_sync
    USE ENTITY work.monitor_reset_sync(rtl);

  FOR ALL : monitor_axi_lite
    USE ENTITY work.monitor_axi_lite(rtl);

  FOR ALL : monitor_dut
    USE ENTITY work.monitor_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL dataReadAXI0_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataReadAXI1_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataReadAXI2_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataReadAXI3_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataReadAXI4_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataReadAXI5_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataReadAXI6_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataReadAXI7_sig                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_dataWriteAXI0              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI2              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI3              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI4              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI5              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI6              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_dataWriteAXI7              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL dataWrite0_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataWrite1_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataWrite2_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataWrite3_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataWrite4_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataWrite5_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataWrite6_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dataWrite7_sig                   : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_monitor_reset_sync_inst : monitor_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_monitor_axi_lite_inst : monitor_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              read_dataReadAXI0 => dataReadAXI0_sig,  -- ufix32
              read_dataReadAXI1 => dataReadAXI1_sig,  -- ufix32
              read_dataReadAXI2 => dataReadAXI2_sig,  -- ufix32
              read_dataReadAXI3 => dataReadAXI3_sig,  -- ufix32
              read_dataReadAXI4 => dataReadAXI4_sig,  -- ufix32
              read_dataReadAXI5 => dataReadAXI5_sig,  -- ufix32
              read_dataReadAXI6 => dataReadAXI6_sig,  -- ufix32
              read_dataReadAXI7 => dataReadAXI7_sig,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_dataWriteAXI0 => write_dataWriteAXI0,  -- ufix32
              write_dataWriteAXI1 => write_dataWriteAXI1,  -- ufix32
              write_dataWriteAXI2 => write_dataWriteAXI2,  -- ufix32
              write_dataWriteAXI3 => write_dataWriteAXI3,  -- ufix32
              write_dataWriteAXI4 => write_dataWriteAXI4,  -- ufix32
              write_dataWriteAXI5 => write_dataWriteAXI5,  -- ufix32
              write_dataWriteAXI6 => write_dataWriteAXI6,  -- ufix32
              write_dataWriteAXI7 => write_dataWriteAXI7,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_monitor_dut_inst : monitor_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              dataWriteAXI0 => write_dataWriteAXI0,  -- ufix32
              dataWriteAXI1 => write_dataWriteAXI1,  -- ufix32
              dataWriteAXI2 => write_dataWriteAXI2,  -- ufix32
              dataWriteAXI3 => write_dataWriteAXI3,  -- ufix32
              dataWriteAXI4 => write_dataWriteAXI4,  -- ufix32
              dataWriteAXI5 => write_dataWriteAXI5,  -- ufix32
              dataWriteAXI6 => write_dataWriteAXI6,  -- ufix32
              dataWriteAXI7 => write_dataWriteAXI7,  -- ufix32
              dataRead0 => dataRead0,  -- ufix32
              dataRead1 => dataRead1,  -- ufix32
              dataRead2 => dataRead2,  -- ufix32
              dataRead3 => dataRead3,  -- ufix32
              dataRead4 => dataRead4,  -- ufix32
              dataRead5 => dataRead5,  -- ufix32
              dataRead6 => dataRead6,  -- ufix32
              dataRead7 => dataRead7,  -- ufix32
              ce_out => ce_out_sig,  -- ufix1
              dataWrite0 => dataWrite0_sig,  -- ufix32
              dataWrite1 => dataWrite1_sig,  -- ufix32
              dataWrite2 => dataWrite2_sig,  -- ufix32
              dataWrite3 => dataWrite3_sig,  -- ufix32
              dataWrite4 => dataWrite4_sig,  -- ufix32
              dataWrite5 => dataWrite5_sig,  -- ufix32
              dataWrite6 => dataWrite6_sig,  -- ufix32
              dataWrite7 => dataWrite7_sig,  -- ufix32
              dataReadAXI0 => dataReadAXI0_sig,  -- ufix32
              dataReadAXI1 => dataReadAXI1_sig,  -- ufix32
              dataReadAXI2 => dataReadAXI2_sig,  -- ufix32
              dataReadAXI3 => dataReadAXI3_sig,  -- ufix32
              dataReadAXI4 => dataReadAXI4_sig,  -- ufix32
              dataReadAXI5 => dataReadAXI5_sig,  -- ufix32
              dataReadAXI6 => dataReadAXI6_sig,  -- ufix32
              dataReadAXI7 => dataReadAXI7_sig  -- ufix32
              );

  ip_timestamp <= unsigned'(X"839FFFD8");

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  dataWrite0 <= dataWrite0_sig;

  dataWrite1 <= dataWrite1_sig;

  dataWrite2 <= dataWrite2_sig;

  dataWrite3 <= dataWrite3_sig;

  dataWrite4 <= dataWrite4_sig;

  dataWrite5 <= dataWrite5_sig;

  dataWrite6 <= dataWrite6_sig;

  dataWrite7 <= dataWrite7_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

