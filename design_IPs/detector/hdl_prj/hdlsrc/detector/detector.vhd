-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\detector\detector.vhd
-- Created: 2022-09-01 15:45:31
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- cntDetectedSingle             ce_out        1
-- cntDetectedRepeat             ce_out        1
-- detectedSync                  ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: detector
-- Source Path: detector/detector
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.detector_pkg.ALL;

ENTITY detector IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        data_im                           :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        ce_out                            :   OUT   std_logic;
        cntDetectedSingle                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        cntDetectedRepeat                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        detectedSync                      :   OUT   std_logic  -- ufix1
        );
END detector;


ARCHITECTURE rtl OF detector IS

  -- Component Declarations
  COMPONENT slicer
    PORT( inputI                          :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          inputQ                          :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          outputI                         :   OUT   vector_of_std_logic_vector12(0 TO 7);  -- sfix12 [8]
          outputQ                         :   OUT   vector_of_std_logic_vector12(0 TO 7)  -- sfix12 [8]
          );
  END COMPONENT;

  COMPONENT xcorr
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inputI                          :   IN    vector_of_std_logic_vector12(0 TO 7);  -- sfix12 [8]
          inputQ                          :   IN    vector_of_std_logic_vector12(0 TO 7);  -- sfix12 [8]
          resultI                         :   OUT   vector_of_std_logic_vector16(0 TO 7);  -- int16 [8]
          resultQ                         :   OUT   vector_of_std_logic_vector16(0 TO 7)  -- int16 [8]
          );
  END COMPONENT;

  COMPONENT adderI
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sequence                        :   IN    vector_of_std_logic_vector16(0 TO 7);  -- int16 [8]
          sumVal                          :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19
          );
  END COMPONENT;

  COMPONENT adderQ
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sequence                        :   IN    vector_of_std_logic_vector16(0 TO 7);  -- int16 [8]
          sumVal                          :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19
          );
  END COMPONENT;

  COMPONENT adderEnergy
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sequence                        :   IN    vector_of_std_logic_vector25(0 TO 7);  -- sfix25 [8]
          sumVal                          :   OUT   std_logic_vector(27 DOWNTO 0)  -- sfix28
          );
  END COMPONENT;

  COMPONENT Accumulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          energyIn                        :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28
          result                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- int32
          );
  END COMPONENT;

  COMPONENT detector_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          xcorrSquareIn                   :   IN    std_logic_vector(38 DOWNTO 0);  -- sfix39
          acorrSquareIn                   :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          detectedRepeat                  :   OUT   std_logic;  -- ufix1
          cntDetectedSingle               :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          cntDetectedRepeat               :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : slicer
    USE ENTITY work.slicer(rtl);

  FOR ALL : xcorr
    USE ENTITY work.xcorr(rtl);

  FOR ALL : adderI
    USE ENTITY work.adderI(rtl);

  FOR ALL : adderQ
    USE ENTITY work.adderQ(rtl);

  FOR ALL : adderEnergy
    USE ENTITY work.adderEnergy(rtl);

  FOR ALL : Accumulator
    USE ENTITY work.Accumulator(rtl);

  FOR ALL : detector_block
    USE ENTITY work.detector_block(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL outputI                          : vector_of_std_logic_vector12(0 TO 7);  -- ufix12 [8]
  SIGNAL outputQ                          : vector_of_std_logic_vector12(0 TO 7);  -- ufix12 [8]
  SIGNAL outputI_signed                   : vector_of_signed12(0 TO 7);  -- sfix12 [8]
  SIGNAL outputQ_signed                   : vector_of_signed12(0 TO 7);  -- sfix12 [8]
  SIGNAL Delay9_out1                      : vector_of_signed12(0 TO 7);  -- sfix12 [8]
  SIGNAL Delay9_out1_1                    : vector_of_std_logic_vector12(0 TO 7);  -- ufix12 [8]
  SIGNAL Delay10_out1                     : vector_of_signed12(0 TO 7);  -- sfix12 [8]
  SIGNAL Delay10_out1_1                   : vector_of_std_logic_vector12(0 TO 7);  -- ufix12 [8]
  SIGNAL resultI                          : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL resultQ                          : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL sumVal                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL sumVal_signed                    : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Delay2_out1                      : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Product1_out1                    : signed(37 DOWNTO 0);  -- sfix38
  SIGNAL Delay6_out1                      : signed(37 DOWNTO 0);  -- sfix38
  SIGNAL sumVal_1                         : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL sumVal_signed_1                  : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Delay1_out1                      : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Product_out1                     : signed(37 DOWNTO 0);  -- sfix38
  SIGNAL Delay11_out1                     : signed(37 DOWNTO 0);  -- sfix38
  SIGNAL Add_out1                         : signed(38 DOWNTO 0);  -- sfix39
  SIGNAL xcorrSquare                      : signed(38 DOWNTO 0);  -- sfix39
  SIGNAL Product3_out1                    : vector_of_signed24(0 TO 7);  -- sfix24 [8]
  SIGNAL Delay3_out1                      : vector_of_signed24(0 TO 7);  -- sfix24 [8]
  SIGNAL Product2_out1                    : vector_of_signed24(0 TO 7);  -- sfix24 [8]
  SIGNAL Delay5_out1                      : vector_of_signed24(0 TO 7);  -- sfix24 [8]
  SIGNAL Add1_out1                        : vector_of_signed25(0 TO 7);  -- sfix25 [8]
  SIGNAL Delay8_out1                      : vector_of_signed25(0 TO 7);  -- sfix25 [8]
  SIGNAL Delay8_out1_1                    : vector_of_std_logic_vector25(0 TO 7);  -- ufix25 [8]
  SIGNAL sumVal_2                         : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL sumVal_signed_2                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay4_out1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL result                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL detectedRepeat                   : std_logic;  -- ufix1
  SIGNAL cntDetectedSingle_tmp            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL cntDetectedRepeat_tmp            : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_slicer : slicer
    PORT MAP( inputI => data_re,  -- ufix128
              inputQ => data_im,  -- ufix128
              outputI => outputI,  -- sfix12 [8]
              outputQ => outputQ  -- sfix12 [8]
              );

  u_xcorr : xcorr
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              inputI => Delay9_out1_1,  -- sfix12 [8]
              inputQ => Delay10_out1_1,  -- sfix12 [8]
              resultI => resultI,  -- int16 [8]
              resultQ => resultQ  -- int16 [8]
              );

  u_adderI : adderI
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              sequence => resultI,  -- int16 [8]
              sumVal => sumVal  -- sfix19
              );

  u_adderQ : adderQ
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              sequence => resultQ,  -- int16 [8]
              sumVal => sumVal_1  -- sfix19
              );

  u_adderEnergy : adderEnergy
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              sequence => Delay8_out1_1,  -- sfix25 [8]
              sumVal => sumVal_2  -- sfix28
              );

  u_Accumulator : Accumulator
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              energyIn => std_logic_vector(Delay4_out1),  -- sfix28
              result => result  -- int32
              );

  u_detector : detector_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              xcorrSquareIn => std_logic_vector(xcorrSquare),  -- sfix39
              acorrSquareIn => result,  -- int32
              detectedRepeat => detectedRepeat,  -- ufix1
              cntDetectedSingle => cntDetectedSingle_tmp,  -- uint16
              cntDetectedRepeat => cntDetectedRepeat_tmp  -- uint16
              );

  outputgen4: FOR k IN 0 TO 7 GENERATE
    outputI_signed(k) <= signed(outputI(k));
  END GENERATE;

  enb <= clk_enable;

  outputgen3: FOR k IN 0 TO 7 GENERATE
    outputQ_signed(k) <= signed(outputQ(k));
  END GENERATE;

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay9_out1 <= (OTHERS => to_signed(16#000#, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1 <= outputI_signed;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  outputgen2: FOR k IN 0 TO 7 GENERATE
    Delay9_out1_1(k) <= std_logic_vector(Delay9_out1(k));
  END GENERATE;

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay10_out1 <= (OTHERS => to_signed(16#000#, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_out1 <= outputQ_signed;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  outputgen1: FOR k IN 0 TO 7 GENERATE
    Delay10_out1_1(k) <= std_logic_vector(Delay10_out1(k));
  END GENERATE;

  sumVal_signed <= signed(sumVal);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay2_out1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= sumVal_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Product1_out1 <= Delay2_out1 * Delay2_out1;

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay6_out1 <= to_signed(0, 38);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  sumVal_signed_1 <= signed(sumVal_1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay1_out1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= sumVal_signed_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Product_out1 <= Delay1_out1 * Delay1_out1;

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay11_out1 <= to_signed(0, 38);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Add_out1 <= resize(Delay6_out1, 39) + resize(Delay11_out1, 39);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      xcorrSquare <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xcorrSquare <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;



  Product3_out1_gen: FOR t_0 IN 0 TO 7 GENERATE
    Product3_out1(t_0) <= outputI_signed(t_0) * outputI_signed(t_0);
  END GENERATE Product3_out1_gen;


  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay3_out1 <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;



  Product2_out1_gen: FOR t_01 IN 0 TO 7 GENERATE
    Product2_out1(t_01) <= outputQ_signed(t_01) * outputQ_signed(t_01);
  END GENERATE Product2_out1_gen;


  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay5_out1 <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;



  Add1_out1_gen: FOR t_02 IN 0 TO 7 GENERATE
    Add1_out1(t_02) <= resize(Delay3_out1(t_02), 25) + resize(Delay5_out1(t_02), 25);
  END GENERATE Add1_out1_gen;


  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay8_out1 <= (OTHERS => to_signed(16#0000000#, 25));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  outputgen: FOR k IN 0 TO 7 GENERATE
    Delay8_out1_1(k) <= std_logic_vector(Delay8_out1(k));
  END GENERATE;

  sumVal_signed_2 <= signed(sumVal_2);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      Delay4_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= sumVal_signed_2;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  ce_out <= clk_enable;

  cntDetectedSingle <= cntDetectedSingle_tmp;

  cntDetectedRepeat <= cntDetectedRepeat_tmp;

  detectedSync <= detectedRepeat;

END rtl;

