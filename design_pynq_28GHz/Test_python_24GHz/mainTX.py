from librarySDR import *
from libraryCommunications import *
from mainDefaults import *
from time import time
import os
clear = lambda: os.system('cls')
clear()


parameters = {'verbose': False, \
              'IP': '152.14.55.233'}
sdr = objSDR(parameters)

3
ppdu = objPPDU(parametersPPDU)       

awvAngleTX24GHz = [np.nan,-45.0,-40.5,-36.0,-31.5,-27.0,-22.5,-18.0,-13.5, -9.0, -4.5,  0.0,  4.5,  9.0, 13.5, 18.0, 22.5, 27.0, 31.5, 36.0, 40.5, 45.0,-45.0,-40.5,-36.0,-31.5,-27.0,-22.5,-18.0,-13.5, -9.0, -4.5,  0.0,  4.5,  9.0, 13.5, 18.0, 22.5, 27.0, 31.5, 36.0, 40.5, 45.0,-45.0,-40.5,-36.0,-31.5,-27.0,-22.5,-18.0,-13.5, -9.0, -4.5,  0.0,  4.5,  9.0, 13.5, 18.0, 22.5, 27.0, 31.5, 36.0, 40.5, 45.0];
awvTableTX24GHz =[0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00,
                0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00,
                0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00,
                0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x3F, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x3F, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x3F,
                0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x3F,
                0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x3F]


###################### Sweep TX beam index
IQtone = np.exp(1j*np.pi*2*np.linspace(0,5,50))
IQramp = np.linspace(0,1,50)
syncAndTestPreamble = np.concatenate((sdr.syncWaveform, np.zeros(50), 1j*IQramp, np.zeros(25), IQtone,  np.zeros(20)))
#print('test')
sdr.setFrequency(parametersDefault['fc'])
sdr.getFrequency()
sdr.setMode('RXen0_TXen1')

#### Setting the I and Q vectors for each of 16 antennas
I = np.empty(16, dtype= np.uint16)  #16 wide array - initialized
Q= np.empty(16, dtype= np.uint16)  #16 wide array - initialized
QI = np.empty(32, dtype= np.uint8)
np.set_printoptions(linewidth=np.inf)  #Setting the way floating point numbers in an array to have infinite length

for beamIndexTX in np.arange(0,64,1):  #running this only once to set the 64x32 array
    idxI = 1    #Index for I array
    idxQ = 0    #Index for Q array (Sivers has its  elemental array as QI rather than IQ)
    idxQI = 0

    for idx in np.arange(0,16,1):
        # Elemental position mapping from awvtable 
        Q = (awvTableTX24GHz[(idxQ)+(beamIndexTX*32)]) #get values from the AWVs table and store in the array
        I = (awvTableTX24GHz[(idxI)+(beamIndexTX*32)]) #get values from the AWVs table and store in the array
        
        QI[idxQI] = np.uint8(((I << 6) | Q) >> 8) #Defining IQ array with first half of the 16bit which got derived after bit shifts
        QI[idxQI + 1] = np.uint8(((I << 6) | Q) & 0xff) #Defining IQ array with second half of the 16bit which got derived after bit shifts

        QI_c = [str(elem) for elem in QI]   #Writing this to eliminate the square brackets from being sent into the command (converting to str)
        QI_c = " ".join(QI_c)               #Writing this to eliminate the square brackets from being sent into the command (converting to str then joining it)

        #to navigate to next column
        idxI = idxI+2                      
        idxQ = idxQ+2
        idxQI = idxQI+2

    print(QI_c)
    sdr.setAWVTX(beamIndexTX, QI_c) #setting IQ elemental value for each of 64 beamindex

while True:
    t1=time();    
    for beamIndexTX in np.arange(0,64,1):     
        sdr.setTXBeamIndex(beamIndexTX)
        IQppdu = ppdu.encode(dec2bin(beamIndexTX,8))
        sdr.transmitIQData( np.concatenate((syncAndTestPreamble,IQppdu)))
    elapsed = time() - t1
    print(elapsed)


sdr.setMode('RXen0_TXen0')


if False: # basic reception
    mode = 0
    numIQdataSamplesPerTransfer = 2**10
    sdr.setupReception(mode,numIQdataSamplesPerTransfer)

    sdr.setMode('RXen1_TXen0')

    numberOfTransfers = 1
    IQdataRX = sdr.receiveIQData(numberOfTransfers)         
    plt.figure(20)
    plt.title('Raw IQ data')
    ind = (np.arange(0,len(IQdataRX[0]),1))
    plt.plot(ind,IQdataRX[0].real)
    plt.show(block=False)
    plt.plot(ind,IQdataRX[0].imag)
    plt.show(block=False)
    plt.grid()
    plt.xlabel('Sample index')
    plt.ylabel('Amplitude')
    plt.show(block=False)

    sdr.setMode('RXen1_TXen0')
    print('Basic RX is done')

if False: # basic transmission
    sdr.setMode('RXen0_TXen1')
    sdr.transmitIQData(sdr.syncWaveform)         
    sdr.setMode('RXen0_TXen0')
    print('Basic TX is done')


